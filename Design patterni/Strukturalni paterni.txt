Strukturalni paterni:

Adapter patern:
Osnovna namjena Adapter paterna je da omogući širu upotrebu vec postojećih klasa. U situacijama kada je potreban 
drugačiji interfejs vec postojeće klase, a ne želimo mijenjati postojeću klasu koristi se Adapter patern. 
Adapter patern kreira novu adapter klasu koja služi kao posrednik između originalne klase i željenog interfejsa. 
Tim postupkom se dobija željena funkcionalnost bez izmjena na originalnoj klasi i bez ugrožavanja integriteta cijele aplikacije.

Situacija u kojoj bi se Adapter patern mogao iskoristiti u našoj aplikaciji jeste prikaz nalaza za doktora i za korisnika. 
Mi možemo adaptirati interfejs da u zavisnosti od toga ko je korisnik dobijamo različit izgled i funkcionalnosti aplikacije.

Proxy patern:
Namjena Proxy paterna je da omogući pristup i kontrolu pristupa stvarnim objektima. Proxy je obično mali javni 
surogat objekat koji predstavlja kompleksni objekat čija aktivizacija se postiže na osnovu postavljenih pravila. 
Proxy patern rješava probleme kada se objekt ne može instancirati direktno (npr. zbog restrikcije pristupa).

Situacija u kojoj bi se Proxy patern mogao iskoristiti u našoj aplikaciji jeste omogućavanje i kontrola pristupa korisnicima.
Klasa Osoba bi koristila Proxy za autentifikaciju korisnika.

Decorator patern:
Osnovna namjena Decorator paterna je da omogući dinamičko dodavanje novih elemenata i ponašanja (funkcionalnosti) 
postojećim objektima. Objekat pri tome ne zna da je urađena dekoracija što je veoma korisno za iskoristljivost i ponovnu 
upotrebu komponenti softverskog sistema. Može se naprimjer koristi i za implementaciju različitih kompresija videa, simultano prevođenje.

Situacija u kojoj bi se Decorator patern mogao iskoristiti u našoj aplikaciji jeste u klasi DnevniUnos ukoliko bismo joj željeli 
dodati nove funckionalnosti koje bi bile vezane za svaki tip unosa, tj. da svaki tip unosa ima neku svoju funkcionalnost neovisno od izvedenih klasa Hrana i NijeHrana.
